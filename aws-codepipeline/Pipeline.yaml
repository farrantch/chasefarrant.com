AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Type: String
  GitHubRepoBranch:
    Type: String
  GitHubRepoName:
    Type: String
  GitHubRepoOwner:
    Type: String
  Prefix:
    Type: String
  ServiceName:
    Type: String
Resources:
  CodeBuildProjectBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      BadgeEnabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref "Environment"
          - Name: PIPELINE_S3_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Ref "S3BucketPipeline"
          - Name: SERVICE_NAME
            Type: PLAINTEXT
            Value: !Ref "ServiceName"
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt "IamRoleBuild.Arn"
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-codebuild/build.yaml
      TimeoutInMinutes: 5
  CodeBuildProjectDeployPost:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      BadgeEnabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref "Environment"
          - Name: PIPELINE_S3_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Ref "S3BucketPipeline"
          - Name: PREFIX
            Type: PLAINTEXT
            Value: !Ref "Prefix"
          - Name: SERVICE_NAME
            Type: PLAINTEXT
            Value: !Ref "ServiceName"
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt "IamRoleDeployPost.Arn"
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-codebuild/deploy-post.yaml
      TimeoutInMinutes: 5
  CodePipelinePipelineMain: 
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - IamPolicyPipeline
    Properties:
      ArtifactStores:
        - ArtifactStore:
            Type: S3
            Location: !Ref "S3BucketPipeline"
          Region: us-east-1
      Name: !Sub "${Prefix}-${Environment}-${ServiceName}"
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt "IamRolePipeline.Arn"
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                BranchName: !Ref "GitHubRepoBranch"
                ConnectionArn: !Ref CodeStarConnectionGitHub
                DetectChanges: true
                FullRepositoryId: !Sub "${GitHubRepoOwner}/${GitHubRepoName}"
                OutputArtifactFormat: CODE_ZIP
              Name: !Ref "GitHubRepoName"
              Namespace: SourceNamespace
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: UpdatePipeline
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt "IamRoleDeploy.Arn"
                StackName: !Sub "${Prefix}-${Environment}-${ServiceName}-pipeline"
                TemplatePath: SourceOutput::aws-codepipeline/Pipeline.yaml
                TemplateConfiguration: !Sub "SourceOutput::aws-codepipeline/envs/${Environment}.template"
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
              Region: us-east-1
              Namespace: UpdatePipelineNamespace
              RoleArn: !GetAtt "IamRolePipeline.Arn"
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref "CodeBuildProjectBuild"
              Name: RunCodeBuild
              Namespace: BuildNamespace
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt "IamRoleDeploy.Arn"
                StackName: !Sub "${Prefix}-${Environment}-${ServiceName}"
                TemplatePath: BuildOutput::aws-cloudformation/CloudFormation.yaml
                TemplateConfiguration: !Sub "BuildOutput::aws-cloudformation/envs/${Environment}.template"
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
              Region: us-east-1
              Namespace: DeployStackNamespace
              RoleArn: !GetAtt "IamRolePipeline.Arn"
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref "CodeBuildProjectDeployPost"
              Name: DeployPost
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
              Namespace: DeployPostNamespace
            - !Ref "AWS::NoValue"
  CodeStarConnectionGitHub:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Sub ${Prefix}-${Environment}-${ServiceName}-GitHub
      ProviderType: GitHub
  IamPolicyBuild:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref "IamRoleBuild"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
          - Sid: ArtifactBucket
            Effect: Allow
            Action:
              - s3:GetObject*
              - s3:PutObject*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${S3BucketPipeline}/*"
  IamPolicyPipeline:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref "IamRolePipeline"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CodeBuildReadOnly
            Effect: Allow
            Action:
              - codebuild:Get*
              - codebuild:List*
              - codebuild:Describe*
            Resource: "*"
          - Sid: CodeBuild
            Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:BatchGetBuilds
            Resource:
              - !GetAtt "CodeBuildProjectBuild.Arn"
              - !GetAtt "CodeBuildProjectDeployPost.Arn"
          - Sid: CloudFormationReadOnly
            Effect: Allow
            Action:
              - cloudformation:Get*
              - cloudformation:Describe*
              - cloudformation:List*
              - cloudformation:Validate*
            Resource: "*"
          - Sid: CloudFormation
            Effect: Allow
            Action:
              - cloudformation:*
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/${Prefix}-${Environment}-${ServiceName}/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/${Prefix}-${Environment}-${ServiceName}-*/*"
          - Sid: CodeStar
            Effect: Allow
            Action:
              - codestar-connections:UseConnection
            Resource:
              - !Ref CodeStarConnectionGitHub
          - Sid: IamRoles
            Effect: Allow
            Action:
              - iam:PassRole
              - sts:AssumeRole
            Resource:
              - !GetAtt "IamRoleDeploy.Arn"
              - !GetAtt "IamRolePipeline.Arn"
          - Sid: ArtifactBucket
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
              - s3:PutObject*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${S3BucketPipeline}/*"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${S3BucketPipeline}"
  IamPolicyDeploy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
          - Sid: CloudFormationReadOnly
            Effect: Allow
            Action:
              - cloudformation:Get*
              - cloudformation:List*
              - cloudformation:Describe*
              - cloudformation:Validate*
            Resource: "*"
          - Sid: CloudFormation
            Effect: Allow
            Action:
              - cloudformation:*
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/${Prefix}-${Environment}-${ServiceName}/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:*::type/resource/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stackset-target/${ServiceName}:*"
          - Sid: CloudFormationStackSets
            Effect: Allow
            Action:
              - cloudformation:*
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stackset/${ServiceName}:*"
          - Sid: TempAdmin
            Effect: Allow
            Action: "*"
            Resource: "*"
  IamPolicyDeployPost:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
          - Sid: S3
            Action:
              - s3:ListBucket*
              - s3:DeleteObject
              - s3:PutObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Prefix}-${Environment}-${ServiceName}-*"
              - !Sub "arn:${AWS::Partition}:s3:::${Prefix}-${Environment}-${ServiceName}-*/*"
            Effect: Allow
          - Sid: S3PipelineBucket
            Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${S3BucketPipeline}/*"
            Effect: Allow
          - Sid: CloudFront
            Action:
              - cloudfront:CreateInvalidation
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/*"
            Effect: Allow
          - Sid: CloudFormation
            Action:
              - cloudformation:Describe*
              - cloudformation:Get*
              - cloudformation:List*
            Resource: '*'
            Effect: Allow
  IamRoleBuild:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
  IamRoleDeploy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt "IamRolePipeline.Arn"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref "IamPolicyDeploy"
  IamRoleDeployPost:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref "IamPolicyDeployPost"
  IamRolePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
  LogGroupCodeBuildProjectBuild:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/codebuild/${CodeBuildName}
        - CodeBuildName: !Ref "CodeBuildProjectBuild"
      RetentionInDays: 30
  LogGroupCodeBuildProjectDeployPost:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/codebuild/${CodeBuildName}
        - CodeBuildName: !Ref "CodeBuildProjectDeployPost"
      RetentionInDays: 30
  S3BucketPipeline:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
